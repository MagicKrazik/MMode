# Generated by Django 5.2.4 on 2025-07-14 06:40

import django.core.validators
import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('core', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.AlterModelOptions(
            name='scheduledactivity',
            options={},
        ),
        migrations.AddField(
            model_name='activitytype',
            name='category',
            field=models.CharField(default='work', max_length=50),
        ),
        migrations.AddField(
            model_name='activitytype',
            name='color_code',
            field=models.CharField(default='#3498db', max_length=7),
        ),
        migrations.AddField(
            model_name='activitytype',
            name='energy_requirement',
            field=models.IntegerField(default=5, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(10)]),
        ),
        migrations.AddField(
            model_name='monkmodegoal',
            name='estimated_effort_hours',
            field=models.IntegerField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name='monkmodegoal',
            name='motivation_reminders_enabled',
            field=models.BooleanField(default=True),
        ),
        migrations.AddField(
            model_name='monkmodegoal',
            name='priority_level',
            field=models.IntegerField(default=1, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)]),
        ),
        migrations.AddField(
            model_name='monkmodegoal',
            name='support_network_enabled',
            field=models.BooleanField(default=True),
        ),
        migrations.AddField(
            model_name='monkmodeobjective',
            name='dependencies',
            field=models.ManyToManyField(blank=True, to='core.monkmodeobjective'),
        ),
        migrations.AddField(
            model_name='monkmodeobjective',
            name='difficulty_level',
            field=models.IntegerField(default=3, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)]),
        ),
        migrations.AddField(
            model_name='monkmodeobjective',
            name='estimated_hours',
            field=models.IntegerField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name='monkmodeobjective',
            name='priority_score',
            field=models.FloatField(default=0.0),
        ),
        migrations.AddField(
            model_name='monkmodeperiod',
            name='ai_generated_json',
            field=models.JSONField(default=dict),
        ),
        migrations.AddField(
            model_name='scheduledactivity',
            name='actual_end_time',
            field=models.DateTimeField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name='scheduledactivity',
            name='actual_start_time',
            field=models.DateTimeField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name='scheduledactivity',
            name='completion_quality',
            field=models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)]),
        ),
        migrations.AddField(
            model_name='scheduledactivity',
            name='energy_required',
            field=models.IntegerField(default=5, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(10)]),
        ),
        migrations.AddField(
            model_name='scheduledactivity',
            name='priority_score',
            field=models.FloatField(default=0.0),
        ),
        migrations.AddField(
            model_name='userdailylog',
            name='challenges_faced',
            field=models.TextField(blank=True),
        ),
        migrations.AddField(
            model_name='userdailylog',
            name='distractions_count',
            field=models.IntegerField(default=0),
        ),
        migrations.AddField(
            model_name='userdailylog',
            name='energy_level_afternoon',
            field=models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(10)]),
        ),
        migrations.AddField(
            model_name='userdailylog',
            name='energy_level_evening',
            field=models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(10)]),
        ),
        migrations.AddField(
            model_name='userdailylog',
            name='energy_level_morning',
            field=models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(10)]),
        ),
        migrations.AddField(
            model_name='userdailylog',
            name='environment_rating',
            field=models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)]),
        ),
        migrations.AddField(
            model_name='userdailylog',
            name='sleep_quality',
            field=models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)]),
        ),
        migrations.AddField(
            model_name='userdailylog',
            name='stress_level',
            field=models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)]),
        ),
        migrations.AddField(
            model_name='userdailylog',
            name='wins_of_the_day',
            field=models.TextField(blank=True),
        ),
        migrations.AlterField(
            model_name='activitytype',
            name='default_duration_minutes',
            field=models.IntegerField(blank=True, null=True),
        ),
        migrations.AlterField(
            model_name='monkmodegoal',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='monk_mode_goals', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AlterField(
            model_name='userdailylog',
            name='adherence_score',
            field=models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(10)]),
        ),
        migrations.AlterField(
            model_name='userdailylog',
            name='monk_mode_period',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='core.monkmodeperiod'),
        ),
        migrations.AlterField(
            model_name='userdailylog',
            name='mood_rating',
            field=models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)]),
        ),
        migrations.AlterField(
            model_name='userdailylog',
            name='reflection_text',
            field=models.TextField(blank=True),
        ),
        migrations.AlterField(
            model_name='userdailylog',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='daily_logs', to=settings.AUTH_USER_MODEL),
        ),
        migrations.CreateModel(
            name='AIPromptHistory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('role', models.CharField(choices=[('user', 'User'), ('model', 'AI Model')], max_length=10)),
                ('message_text', models.TextField()),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('session_id', models.CharField(blank=True, max_length=100, null=True)),
                ('message_type', models.CharField(default='chat', max_length=50)),
                ('monk_mode_goal', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='core.monkmodegoal')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='ai_conversations', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['timestamp'],
            },
        ),
        migrations.CreateModel(
            name='EnergyLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.DateTimeField()),
                ('energy_level', models.IntegerField(validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(10)])),
                ('context_factors', models.JSONField(default=dict)),
                ('notes', models.TextField(blank=True)),
                ('activity_before', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='core.activitytype')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='energy_logs', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-timestamp'],
            },
        ),
        migrations.CreateModel(
            name='EnergyPrediction',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('predicted_for', models.DateTimeField()),
                ('predicted_energy', models.FloatField()),
                ('confidence_score', models.FloatField()),
                ('actual_energy', models.FloatField(blank=True, null=True)),
                ('prediction_accuracy', models.FloatField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='energy_predictions', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='EnvironmentSetting',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('setting_name', models.CharField(max_length=100)),
                ('description', models.TextField()),
                ('settings_json', models.JSONField(default=dict)),
                ('is_active', models.BooleanField(default=True)),
                ('effectiveness_rating', models.FloatField(default=0.0)),
                ('activity_types', models.ManyToManyField(blank=True, to='core.activitytype')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='environment_settings', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='HabitStack',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('description', models.TextField()),
                ('habits', models.JSONField(default=list)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('monk_mode_goal', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.monkmodegoal')),
                ('trigger_activity', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='triggered_habits', to='core.activitytype')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='habit_stacks', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='MotivationMedia',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('media_type', models.CharField(choices=[('image', 'Image'), ('video', 'Video'), ('audio', 'Audio'), ('text', 'Text Note')], max_length=10)),
                ('file_path', models.FileField(blank=True, null=True, upload_to='motivation/')),
                ('title', models.CharField(max_length=100)),
                ('description', models.TextField(blank=True)),
                ('text_content', models.TextField(blank=True)),
                ('display_triggers', models.JSONField(default=list)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('last_shown', models.DateTimeField(blank=True, null=True)),
                ('effectiveness_rating', models.FloatField(default=0.0)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='motivation_media', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='SelfLetter',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('subject', models.CharField(max_length=200)),
                ('content', models.TextField()),
                ('delivery_date', models.DateTimeField(blank=True, null=True)),
                ('delivery_trigger', models.CharField(choices=[('scheduled', 'Scheduled Date'), ('milestone', 'Milestone Achievement'), ('mood_low', 'When Feeling Down'), ('completion', 'Goal Completion'), ('halfway', 'Halfway Point')], max_length=20)),
                ('is_delivered', models.BooleanField(default=False)),
                ('delivered_at', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('monk_mode_goal', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='core.monkmodegoal')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='self_letters', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='SupportContact',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('email', models.EmailField(max_length=254)),
                ('phone', models.CharField(blank=True, max_length=20)),
                ('relationship', models.CharField(choices=[('family', 'Family Member'), ('friend', 'Friend'), ('mentor', 'Mentor'), ('coach', 'Coach'), ('partner', 'Life Partner'), ('colleague', 'Colleague'), ('other', 'Other')], max_length=20)),
                ('notification_preferences', models.JSONField(default=dict)),
                ('is_active', models.BooleanField(default=True)),
                ('emergency_contact', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='support_contacts', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='SupportNotification',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('trigger_type', models.CharField(choices=[('mood_low', 'Low Mood Rating'), ('missed_activities', 'Missed Activities'), ('adherence_drop', 'Adherence Drop'), ('user_request', 'User Request'), ('emergency', 'Emergency')], max_length=20)),
                ('message_template', models.TextField()),
                ('sent_at', models.DateTimeField()),
                ('response_received', models.BooleanField(default=False)),
                ('response_text', models.TextField(blank=True)),
                ('response_at', models.DateTimeField(blank=True, null=True)),
                ('support_contact', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.supportcontact')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='TaskPriorityScore',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('deadline_urgency', models.FloatField(default=0.0)),
                ('goal_impact', models.FloatField(default=0.0)),
                ('energy_requirement', models.FloatField(default=0.0)),
                ('dependency_weight', models.FloatField(default=0.0)),
                ('user_preference', models.FloatField(default=0.0)),
                ('momentum_factor', models.FloatField(default=0.0)),
                ('final_score', models.FloatField(default=0.0)),
                ('calculated_at', models.DateTimeField(auto_now=True)),
                ('scheduled_activity', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='task_priority_score', to='core.scheduledactivity')),
            ],
        ),
        migrations.CreateModel(
            name='UserCommitment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('commitment_text', models.TextField()),
                ('consequences', models.TextField()),
                ('reward_for_success', models.TextField()),
                ('public_commitment', models.BooleanField(default=False)),
                ('signed_date', models.DateTimeField(auto_now_add=True)),
                ('witness_email', models.EmailField(blank=True, max_length=254)),
                ('is_active', models.BooleanField(default=True)),
                ('monk_mode_goal', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.monkmodegoal')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='commitments', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='HabitCompletion',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('completion_date', models.DateField()),
                ('habits_completed', models.JSONField(default=list)),
                ('completion_percentage', models.FloatField(default=0.0)),
                ('notes', models.TextField(blank=True)),
                ('habit_stack', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='completions', to='core.habitstack')),
            ],
            options={
                'unique_together': {('habit_stack', 'completion_date')},
            },
        ),
        migrations.CreateModel(
            name='UserProductivityPattern',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('hour_of_day', models.IntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(23)])),
                ('average_performance', models.FloatField(default=0.0)),
                ('energy_level', models.FloatField(default=0.0)),
                ('completion_rate', models.FloatField(default=0.0)),
                ('sample_size', models.IntegerField(default=0)),
                ('last_updated', models.DateTimeField(auto_now=True)),
                ('activity_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.activitytype')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='productivity_patterns', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'unique_together': {('user', 'hour_of_day', 'activity_type')},
            },
        ),
    ]
